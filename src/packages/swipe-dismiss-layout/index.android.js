"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var view_1 = require("tns-core-modules/ui/core/view");
var callback_1 = require("./callback");
var SwipeDismissLayout = (function (_super) {
    __extends(SwipeDismissLayout, _super);
    function SwipeDismissLayout() {
        return _super.call(this) || this;
    }
    Object.defineProperty(SwipeDismissLayout.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    SwipeDismissLayout.prototype.createNativeView = function () {
        this._android = new android.support.wear.widget.SwipeDismissFrameLayout(this._context);
        this._holder = new android.widget.LinearLayout(this._context);
        if (!this._androidViewId) {
            this._androidViewId = android.view.View.generateViewId();
        }
        this._android.setId(this._androidViewId);
        this._holder.setOrientation(android.widget.LinearLayout.VERTICAL);
        this._holder.setGravity(android.view.Gravity.FILL_VERTICAL);
        this._holder.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT));
        this._android.addView(this._holder);
        return this._android;
    };
    SwipeDismissLayout.prototype.initNativeView = function () {
        _super.prototype.initNativeView.call(this);
        this._callback = new callback_1.TNS_SwipeDismissFrameLayoutCallback(new WeakRef(this));
        this._android.addCallback(this._callback);
    };
    SwipeDismissLayout.prototype.disposeNativeView = function () {
        _super.prototype.disposeNativeView.call(this);
    };
    SwipeDismissLayout.prototype.onLoaded = function () {
        var _this = this;
        _super.prototype.onLoaded.call(this);
        this._childViews.forEach(function (value) {
            _this._addView(value);
            _this._holder.addView(value.nativeView);
        });
    };
    SwipeDismissLayout.prototype._addChildFromBuilder = function (name, value) {
        if (!this._childViews) {
            this._childViews = new Map();
        }
        if (!value.parent) {
            this._childViews.set(value._domId, value);
        }
    };
    SwipeDismissLayout.dimissedEvent = 'dismissed';
    SwipeDismissLayout.swipeCanceledEvent = 'swipeCanceled';
    SwipeDismissLayout.swipeStartedEvent = 'swipeStarted';
    return SwipeDismissLayout;
}(view_1.View));
exports.SwipeDismissLayout = SwipeDismissLayout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYW5kcm9pZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LmFuZHJvaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxzREFBcUQ7QUFDckQsdUNBQWlFO0FBRWpFO0lBQXdDLHNDQUFJO0lBb0IxQztlQUNFLGlCQUFPO0lBQ1QsQ0FBQztJQUNELHNCQUFJLHVDQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUFFRCw2Q0FBZ0IsR0FBaEI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUNyRSxJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUQ7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQzFCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUMvQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNoRCxDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSwyQ0FBYyxHQUFyQjtRQUNFLGlCQUFNLGNBQWMsV0FBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSw4Q0FBbUMsQ0FDdEQsSUFBSSxPQUFPLENBQUMsSUFBVyxDQUFDLENBQ3pCLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLDhDQUFpQixHQUF4QjtRQUNFLGlCQUFNLGlCQUFpQixXQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLHFDQUFRLEdBQWY7UUFBQSxpQkFNQztRQUxDLGlCQUFNLFFBQVEsV0FBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUM1QixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxpREFBb0IsR0FBcEIsVUFBcUIsSUFBWSxFQUFFLEtBQVc7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztTQUM1QztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBNUVhLGdDQUFhLEdBQUcsV0FBVyxDQUFDO0lBSTVCLHFDQUFrQixHQUFHLGVBQWUsQ0FBQztJQUlyQyxvQ0FBaUIsR0FBRyxjQUFjLENBQUM7SUFxRW5ELHlCQUFDO0NBQUEsQUFqRkQsQ0FBd0MsV0FBSSxHQWlGM0M7QUFqRlksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRkQ2hpbGRGcm9tQnVpbGRlciB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29udGVudC12aWV3JztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL2NvcmUvdmlldyc7XG5pbXBvcnQgeyBUTlNfU3dpcGVEaXNtaXNzRnJhbWVMYXlvdXRDYWxsYmFjayB9IGZyb20gJy4vY2FsbGJhY2snO1xuXG5leHBvcnQgY2xhc3MgU3dpcGVEaXNtaXNzTGF5b3V0IGV4dGVuZHMgVmlldyBpbXBsZW1lbnRzIEFkZENoaWxkRnJvbUJ1aWxkZXIge1xuICAvKipcbiAgICogU3RyaW5nIHZhbHVlIGZvciBob29raW5nIGludG8gdGhlIGxheW91dCBkaXNtaXNzZWQgZXZlbnQuIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgc3dpcGUgbGF5b3V0IGhhcyBiZWVuIGRpc21pc3NlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGltaXNzZWRFdmVudCA9ICdkaXNtaXNzZWQnO1xuICAvKipcbiAgICogU3RyaW5nIHZhbHVlIGZvciBob29raW5nIGludG8gdGhlIGxheW91dCBkaXNtaXNzZWQgZXZlbnQuIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgc3dpcGUgbGF5b3V0IGhhcyBiZWVuIGRpc21pc3NlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3dpcGVDYW5jZWxlZEV2ZW50ID0gJ3N3aXBlQ2FuY2VsZWQnO1xuICAvKipcbiAgICogU3RyaW5nIHZhbHVlIGZvciBob29raW5nIGludG8gdGhlIGxheW91dCBkaXNtaXNzZWQgZXZlbnQuIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgc3dpcGUgbGF5b3V0IGhhcyBiZWVuIGRpc21pc3NlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3dpcGVTdGFydGVkRXZlbnQgPSAnc3dpcGVTdGFydGVkJztcblxuICBwcml2YXRlIF9hbmRyb2lkOiBhbmRyb2lkLnN1cHBvcnQud2Vhci53aWRnZXQuU3dpcGVEaXNtaXNzRnJhbWVMYXlvdXQ7XG4gIHByaXZhdGUgX2hvbGRlcjogYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0O1xuICBwcml2YXRlIF9jYWxsYmFjazogVE5TX1N3aXBlRGlzbWlzc0ZyYW1lTGF5b3V0Q2FsbGJhY2s7XG4gIHByaXZhdGUgX2FuZHJvaWRWaWV3SWQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfY2hpbGRWaWV3czogTWFwPG51bWJlciwgVmlldz47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBnZXQgYW5kcm9pZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYW5kcm9pZDtcbiAgfVxuXG4gIGNyZWF0ZU5hdGl2ZVZpZXcoKSB7XG4gICAgdGhpcy5fYW5kcm9pZCA9IG5ldyBhbmRyb2lkLnN1cHBvcnQud2Vhci53aWRnZXQuU3dpcGVEaXNtaXNzRnJhbWVMYXlvdXQoXG4gICAgICB0aGlzLl9jb250ZXh0XG4gICAgKTtcbiAgICB0aGlzLl9ob2xkZXIgPSBuZXcgYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0KHRoaXMuX2NvbnRleHQpO1xuXG4gICAgaWYgKCF0aGlzLl9hbmRyb2lkVmlld0lkKSB7XG4gICAgICB0aGlzLl9hbmRyb2lkVmlld0lkID0gYW5kcm9pZC52aWV3LlZpZXcuZ2VuZXJhdGVWaWV3SWQoKTtcbiAgICB9XG4gICAgdGhpcy5fYW5kcm9pZC5zZXRJZCh0aGlzLl9hbmRyb2lkVmlld0lkKTtcblxuICAgIHRoaXMuX2hvbGRlci5zZXRPcmllbnRhdGlvbihhbmRyb2lkLndpZGdldC5MaW5lYXJMYXlvdXQuVkVSVElDQUwpO1xuICAgIHRoaXMuX2hvbGRlci5zZXRHcmF2aXR5KGFuZHJvaWQudmlldy5HcmF2aXR5LkZJTExfVkVSVElDQUwpO1xuICAgIHRoaXMuX2hvbGRlci5zZXRMYXlvdXRQYXJhbXMoXG4gICAgICBuZXcgYW5kcm9pZC52aWV3LlZpZXdHcm91cC5MYXlvdXRQYXJhbXMoXG4gICAgICAgIGFuZHJvaWQudmlldy5WaWV3R3JvdXAuTGF5b3V0UGFyYW1zLkZJTExfUEFSRU5ULFxuICAgICAgICBhbmRyb2lkLnZpZXcuVmlld0dyb3VwLkxheW91dFBhcmFtcy5GSUxMX1BBUkVOVFxuICAgICAgKVxuICAgICk7XG5cbiAgICB0aGlzLl9hbmRyb2lkLmFkZFZpZXcodGhpcy5faG9sZGVyKTtcblxuICAgIHJldHVybiB0aGlzLl9hbmRyb2lkO1xuICB9XG5cbiAgcHVibGljIGluaXROYXRpdmVWaWV3KCkge1xuICAgIHN1cGVyLmluaXROYXRpdmVWaWV3KCk7XG4gICAgLy8gYWRkIHRoZSBsYXlvdXQgY2FsbGJhY2tcbiAgICB0aGlzLl9jYWxsYmFjayA9IG5ldyBUTlNfU3dpcGVEaXNtaXNzRnJhbWVMYXlvdXRDYWxsYmFjayhcbiAgICAgIG5ldyBXZWFrUmVmKHRoaXMgYXMgYW55KVxuICAgICk7XG4gICAgdGhpcy5fYW5kcm9pZC5hZGRDYWxsYmFjayh0aGlzLl9jYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZU5hdGl2ZVZpZXcoKSB7XG4gICAgc3VwZXIuZGlzcG9zZU5hdGl2ZVZpZXcoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxvYWRlZCgpOiB2b2lkIHtcbiAgICBzdXBlci5vbkxvYWRlZCgpO1xuICAgIHRoaXMuX2NoaWxkVmlld3MuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICB0aGlzLl9hZGRWaWV3KHZhbHVlKTtcbiAgICAgIHRoaXMuX2hvbGRlci5hZGRWaWV3KHZhbHVlLm5hdGl2ZVZpZXcpO1xuICAgIH0pO1xuICB9XG5cbiAgX2FkZENoaWxkRnJvbUJ1aWxkZXIobmFtZTogc3RyaW5nLCB2YWx1ZTogVmlldyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fY2hpbGRWaWV3cykge1xuICAgICAgdGhpcy5fY2hpbGRWaWV3cyA9IG5ldyBNYXA8bnVtYmVyLCBWaWV3PigpO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlLnBhcmVudCkge1xuICAgICAgdGhpcy5fY2hpbGRWaWV3cy5zZXQodmFsdWUuX2RvbUlkLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iXX0=