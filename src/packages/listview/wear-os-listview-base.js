"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var trace_1 = require("tns-core-modules/trace");
var builder_1 = require("tns-core-modules/ui/builder");
var view_1 = require("tns-core-modules/ui/core/view");
var weak_event_listener_1 = require("tns-core-modules/ui/core/weak-event-listener");
var label_1 = require("tns-core-modules/ui/label/label");
__export(require("tns-core-modules/ui/core/view"));
exports.ITEMLOADING = 'itemLoading';
exports.LOADMOREITEMS = 'loadMoreItems';
exports.ITEMTAP = 'itemTap';
exports.SCROLLEVENT = 'scroll';
exports.ITEMSELECTED = 'itemSelected';
exports.ITEMSELECTING = 'itemSelecting';
exports.ITEMDESELECTED = 'itemDeselected';
exports.ITEMDESELECTING = 'itemDeselecting';
exports.PULLTOREFRESHINITIATEDEVENT = 'pullToRefreshInitiated';
var knownTemplates;
(function (knownTemplates) {
    knownTemplates.itemTemplate = 'itemTemplate';
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var knownMultiTemplates;
(function (knownMultiTemplates) {
    knownMultiTemplates.itemTemplates = 'itemTemplates';
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));
var knownCollections;
(function (knownCollections) {
    knownCollections.items = 'items';
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
exports.wearOsListViewTraceCategory = 'ns-wear-os-listview';
function WearOsListViewLog(message) {
    trace_1.write(message, exports.wearOsListViewTraceCategory);
}
exports.WearOsListViewLog = WearOsListViewLog;
function WearOsListViewError(message) {
    trace_1.write(message, exports.wearOsListViewTraceCategory, trace_1.messageType.error);
}
exports.WearOsListViewError = WearOsListViewError;
var autoEffectiveItemHeight = 100;
var autoEffectiveItemWidth = 100;
var WearOsListViewBase = (function (_super) {
    __extends(WearOsListViewBase, _super);
    function WearOsListViewBase() {
        var _this = _super.call(this) || this;
        _this.pullToRefresh = false;
        _this._defaultTemplate = {
            key: 'default',
            createView: function () {
                if (_this.itemTemplate) {
                    return builder_1.parse(_this.itemTemplate, _this);
                }
                return undefined;
            }
        };
        _this._itemTemplatesInternal = new Array(_this._defaultTemplate);
        _this._innerWidth = 0;
        _this._innerHeight = 0;
        _this._itemTemplateSelectorBindable = new label_1.Label();
        _this.itemReorder = false;
        _this.selectionBehavior = 'None';
        _this.multipleSelection = false;
        _this._itemIdGenerator = function (_item, index) { return index; };
        return _this;
    }
    Object.defineProperty(WearOsListViewBase.prototype, "itemIdGenerator", {
        get: function () {
            return this._itemIdGenerator;
        },
        set: function (generatorFn) {
            this._itemIdGenerator = generatorFn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WearOsListViewBase.prototype, "itemTemplateSelector", {
        get: function () {
            return this._itemTemplateSelector;
        },
        set: function (value) {
            var _this = this;
            if (typeof value === 'string') {
                this._itemTemplateSelectorBindable.bind({
                    sourceProperty: null,
                    targetProperty: 'templateKey',
                    expression: value
                });
                this._itemTemplateSelector = function (item, index, items) {
                    item['$index'] = index;
                    _this._itemTemplateSelectorBindable.bindingContext = item;
                    return _this._itemTemplateSelectorBindable.get('templateKey');
                };
            }
            else if (typeof value === 'function') {
                this._itemTemplateSelector = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    WearOsListViewBase.prototype.onLayout = function (left, top, right, bottom) {
        _super.prototype.onLayout.call(this, left, top, right, bottom);
        this._innerWidth =
            right - left - this.effectivePaddingLeft - this.effectivePaddingRight;
        this._innerHeight =
            bottom - top - this.effectivePaddingTop - this.effectivePaddingBottom;
        this._effectiveItemWidth = view_1.PercentLength.toDevicePixels(this.itemWidth, autoEffectiveItemWidth, this._innerWidth);
        this._effectiveItemHeight = view_1.PercentLength.toDevicePixels(this.itemHeight, autoEffectiveItemHeight, this._innerHeight);
    };
    WearOsListViewBase.prototype._getItemTemplate = function (index) {
        var templateKey = 'default';
        if (this.itemTemplateSelector) {
            var dataItem = this._getDataItem(index);
            templateKey = this._itemTemplateSelector(dataItem, index, this.items);
        }
        for (var i = 0, length_1 = this._itemTemplatesInternal.length; i < length_1; i++) {
            if (this._itemTemplatesInternal[i].key === templateKey) {
                return this._itemTemplatesInternal[i];
            }
        }
        return this._itemTemplatesInternal[0];
    };
    WearOsListViewBase.prototype._prepareItem = function (item, index) {
        if (item) {
            item.bindingContext = this._getDataItem(index);
        }
    };
    WearOsListViewBase.prototype._getDefaultItemContent = function (index) {
        var lbl = new label_1.Label();
        lbl.bind({
            targetProperty: 'text',
            sourceProperty: '$value'
        });
        return lbl;
    };
    WearOsListViewBase.prototype._updateNativeItems = function (args) {
        this.refresh();
    };
    WearOsListViewBase.prototype._getDataItem = function (index) {
        var thisItems = this.items;
        return thisItems && thisItems.getItem
            ? thisItems.getItem(index)
            : thisItems[index];
    };
    WearOsListViewBase.knownFunctions = ['itemTemplateSelector', 'itemIdGenerator'];
    WearOsListViewBase.itemLoadingEvent = exports.ITEMLOADING;
    WearOsListViewBase.itemTapEvent = exports.ITEMTAP;
    WearOsListViewBase.loadMoreItemsEvent = exports.LOADMOREITEMS;
    WearOsListViewBase.scrollEvent = exports.SCROLLEVENT;
    WearOsListViewBase = __decorate([
        view_1.CSSType('WearOsListView'),
        __metadata("design:paramtypes", [])
    ], WearOsListViewBase);
    return WearOsListViewBase;
}(view_1.View));
exports.WearOsListViewBase = WearOsListViewBase;
var LayoutTypeOptions;
(function (LayoutTypeOptions) {
    LayoutTypeOptions["GRID"] = "grid";
    LayoutTypeOptions["LINEAR"] = "linear";
    LayoutTypeOptions["STAGGERED"] = "staggered";
})(LayoutTypeOptions = exports.LayoutTypeOptions || (exports.LayoutTypeOptions = {}));
exports.itemsProperty = new view_1.Property({
    name: 'items',
    valueChanged: function (target, oldValue, newValue) {
        if (oldValue instanceof observable_1.Observable) {
            weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._updateNativeItems, target);
        }
        if (newValue instanceof observable_1.Observable) {
            weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._updateNativeItems, target);
        }
        target.refresh();
    }
});
exports.itemsProperty.register(WearOsListViewBase);
exports.itemTemplateProperty = new view_1.Property({
    name: 'itemTemplate',
    affectsLayout: true,
    valueChanged: function (target) {
        target.refresh();
    }
});
exports.itemTemplateProperty.register(WearOsListViewBase);
exports.itemTemplatesProperty = new view_1.Property({
    name: 'itemTemplates',
    affectsLayout: true,
    valueConverter: function (value) {
        if (typeof value === 'string') {
            return builder_1.parseMultipleTemplates(value);
        }
        return value;
    }
});
exports.itemTemplatesProperty.register(WearOsListViewBase);
exports.layoutTypeProperty = new view_1.Property({
    name: 'layoutType',
    affectsLayout: true
});
exports.layoutTypeProperty.register(WearOsListViewBase);
exports.spanCountProperty = new view_1.Property({
    name: 'spanCount',
    defaultValue: 1,
    affectsLayout: true,
    valueConverter: function (v) { return parseInt(v, 10); }
});
exports.spanCountProperty.register(WearOsListViewBase);
var defaultItemWidth = 'auto';
exports.itemWidthProperty = new view_1.CoercibleProperty({
    name: 'itemWidth',
    affectsLayout: true,
    defaultValue: { value: 1, unit: '%' },
    equalityComparer: view_1.PercentLength.equals,
    valueConverter: view_1.PercentLength.parse,
    coerceValue: function (target, value) {
        return target.nativeView ? value : defaultItemWidth;
    },
    valueChanged: function (target, oldValue, newValue) {
        target._itemWidth = newValue;
        target._effectiveItemWidth = view_1.PercentLength.toDevicePixels(newValue, autoEffectiveItemWidth, target._innerWidth);
        target.refresh();
    }
});
exports.itemWidthProperty.register(WearOsListViewBase);
var defaultItemHeight = 'auto';
exports.itemHeightProperty = new view_1.CoercibleProperty({
    name: 'itemHeight',
    affectsLayout: true,
    defaultValue: { value: 0.2, unit: '%' },
    coerceValue: function (target, value) {
        return target.nativeView ? value : defaultItemHeight;
    },
    equalityComparer: view_1.PercentLength.equals,
    valueConverter: view_1.PercentLength.parse,
    valueChanged: function (target, oldValue, newValue) {
        target._itemHeight = newValue;
        target._effectiveItemHeight = view_1.PercentLength.toDevicePixels(newValue, autoEffectiveItemHeight, target._innerHeight);
        target.refresh();
    }
});
exports.itemHeightProperty.register(WearOsListViewBase);
var converter = view_1.makeParser(view_1.makeValidator('horizontal', 'vertical'));
exports.orientationProperty = new view_1.Property({
    name: 'orientation',
    defaultValue: 'vertical',
    affectsLayout: true,
    valueChanged: function (target, oldValue, newValue) {
        target.refresh();
    },
    valueConverter: converter
});
exports.orientationProperty.register(WearOsListViewBase);
exports.maxProperty = new view_1.Property({
    name: 'max',
    affectsLayout: true,
    defaultValue: { value: 1, unit: '%' },
    equalityComparer: view_1.PercentLength.equals,
    valueConverter: view_1.PercentLength.parse
});
exports.maxProperty.register(WearOsListViewBase);
exports.minProperty = new view_1.Property({
    name: 'min',
    affectsLayout: true,
    defaultValue: { value: 1 / 3, unit: '%' },
    equalityComparer: view_1.PercentLength.equals,
    valueConverter: view_1.PercentLength.parse
});
exports.minProperty.register(WearOsListViewBase);
exports.hideScrollBarProperty = new view_1.Property({
    name: 'hideScrollBar'
});
exports.hideScrollBarProperty.register(WearOsListViewBase);
exports.circularScrollingEnabled = new view_1.Property({
    name: 'circularScrollingEnabled',
    defaultValue: false
});
exports.circularScrollingEnabled.register(WearOsListViewBase);
//# sourceMappingURL=data:application/json;base64,